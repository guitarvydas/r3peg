#;;; All rights reserved.

#;;; Redistribution and use in source and binary forms, with or without
#;;; modification, are permitted provided that the following conditions
#;;; are met:

#;;;    Redistributions of source code must retain the above copyright
#;;;    notice, this list of conditions and the following disclaimer.

#;;;    Redistributions in binary form must reproduce the above
#;;;    copyright notice, this list of conditions and the following
#;;;    disclaimer in the documentation and/or other materials provided
#;;;    with the distribution.

#;;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
#;;; CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#;;; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#;;; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#;;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS
#;;; BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#;;; EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
#;;; TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#;;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#;;; ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
#;;; TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
#;;; THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#;;; SUCH DAMAGE.

#;; the (PEG) grammar for a PEG parser

Grammar <- Spacing Definition+ Spacing EndOfFile 

Definition <- Identifier LEFTARROW Expression spacing semanticCode? 

SemanticCode <- OPENBRACE notbrace+ CLOSEBRACE 

notbrace <- UQLiteral / ( ! '}' . ) 

Expression <- pSequence SLASHSequence*  

SLASHSequence <- SLASH pSequence  

pSequence <- Prefix*  

Prefix <- (pAND / pNOT)? Suffix 

Suffix <- Primary (QUESTION / STAR / PLUS)? 

Primary <- P1
	 / P2
	 / Literal
	 / pClass
	 / DOT  

P1 <- Identifier !LEFTARROW  

P2 <- OPENPAREN Expression CLOSEPAREN 

Identifier <- StringIdentifier 

StringIdentifier <- IdentStart IdentCont* Spacing 

IdentStart <- [a-zA-Z_]

IdentCont <- IdentStart / '-' / [0-9]

Literal <- ['] NotSingle* ['] Spacing
         / ["] NotDouble* ["] Spacing  

UQLiteral <- ["] NotDouble* ["] Spacing  

NotSingle <- !['] pChar  { (:function second) }

NotDouble <- !["] pChar  { (:function second) }

pClass <- '[' NotRB* ']' Spacing 

NotRB <- !']' Range  { (:function second) }

Range <- CharRange / SingleChar

CharRange <- pChar '-' pChar 

SingleChar <- pChar 

pChar <- EscChar / NumChar1 / NumChar2 / AnyChar

EscChar <- '\\' ( 'n' / 'r' / 't' / ['] / '\"' / '[' / ']' / '\\' )  

NumChar1 <- '\\' [0-2][0-7][0-7]  

NumChar2 <- '\\' [0-7][0-7]?  

AnyChar <- !'\\' .  

LEFTARROW <- '<-' Spacing 

SLASH     <- '/' Spacing 

pAND       <- '&' Spacing 

pNOT       <- '!' Spacing 

QUESTION  <- '?' Spacing 

STAR      <- '*' Spacing 

PLUS      <- '+' Spacing 

OPENPAREN <- '(' Spacing 

CLOSEPAREN <- ')' Spacing 

OPENBRACE  <- '{' Spacing 

CLOSEBRACE <- '}' Spacing 

DOT       <- '.' Spacing 

Spacing <- (pSpace / Comment)* 

Comment <- '#' (!EndOfLine char1)* (EndOfLine / EndOfFile) 

char1 <- . 

pSpace   <- ' ' / '\t' / EndOfLine 

EndOfLine <- '\r\n' / '\n' / '\r' 

EndOfFile <- !. 
